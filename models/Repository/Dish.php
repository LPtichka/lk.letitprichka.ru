<?php

namespace app\models\Repository;

use app\models\Helper\Weight;
use app\models\Queries\DishQuery;
use yii\behaviors\TimestampBehavior;

/**
 * This is the model class for table "{{%dish}}".
 *
 * @property int $id
 * @property string $name
 * @property boolean $is_breakfast
 * @property boolean $is_dinner
 * @property boolean $is_lunch
 * @property boolean $is_supper
 * @property boolean $is_garnish
 * @property boolean $with_garnish
 * @property int $weight
 * @property string $process
 * @property int $kkal
 * @property int $fat
 * @property int $proteins
 * @property int $carbohydrates
 * @property string $storage_condition
 * @property int $created_at
 * @property int $updated_at
 *
 * @property Exception $exception
 * @property DishProduct[] $dishProducts
 */
class Dish extends \yii\db\ActiveRecord
{
    const TYPE_FIRST = 1;
    const TYPE_SECOND = 2;
    const TYPE_DESERT = 3;
    const TYPE_SALAD = 4;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%dish}}';
    }

    /**
     * @inheritdoc
     * @return DishQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new DishQuery(get_called_class());
    }

    /**
     * @return array
     */
    public function attributeLabels()
    {
        return [
            'name'              => \Yii::t('dish', 'Name'),
            'is_breakfast'      => \Yii::t('dish', 'Breakfast'),
            'is_dinner'         => \Yii::t('dish', 'Dinner'),
            'is_lunch'          => \Yii::t('dish', 'Lunch'),
            'is_supper'         => \Yii::t('dish', 'Supper'),
            'is_garnish'        => \Yii::t('dish', 'Garnish'),
            'with_garnish'      => \Yii::t('dish', 'With garnish'),
            'fat'               => \Yii::t('dish', 'Fat'),
            'kkal'              => \Yii::t('dish', 'Kkal'),
            'type'              => \Yii::t('dish', 'Type'),
            'weight'            => \Yii::t('dish', 'Weight'),
            'proteins'          => \Yii::t('dish', 'Proteins'),
            'carbohydrates'     => \Yii::t('dish', 'Carbohydrates'),
            'storage_condition' => \Yii::t('dish', 'Storage condition'),
            'process'           => \Yii::t('dish', 'Process'),
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['is_breakfast', 'is_dinner', 'is_lunch', 'is_supper', 'is_garnish', 'with_garnish'], 'boolean'],
            [['storage_condition', 'process', 'name'], 'string'],
            [['fat', 'weight', 'proteins', 'kkal', 'carbohydrates'], 'number'],
            [['name', 'process', 'fat', 'weight', 'proteins', 'kkal', 'carbohydrates', 'type'], 'required'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            TimestampBehavior::class,
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getDishProducts()
    {
        return $this->hasMany(DishProduct::class, ['dish_id' => 'id']);
    }

    /**
     * @param DishProduct[] $dishProducts
     */
    public function setDishProducts(array $dishProducts): void
    {
        $this->dishProducts = $dishProducts;
    }

    /**
     * Получение типов блюд
     *
     * @return array
     */
    public function getTypes(): array
    {
        return [
            self::TYPE_FIRST  => \Yii::t('dish', 'First course'),
            self::TYPE_SECOND => \Yii::t('dish', 'Second course'),
            self::TYPE_SALAD  => \Yii::t('dish', 'Salad'),
            self::TYPE_DESERT => \Yii::t('dish', 'Dessert'),
        ];
    }

    public function beforeSave($insert)
    {
        $this->weight = (new Weight())->convert((float) $this->weight, Weight::UNIT_KG);
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }
}